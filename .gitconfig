[include]
  path = ~/.gitconfig.local
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[core]
	excludesfile = /Users/akiho/.gitignore_global
	editor = vim
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[push]
	default = current
[url "https://github.com/"]
	insteadOf = git://github.com/
[merge]
	conflictStyle = diff3
[ghq]
	root = /Users/akiho/github
[alias]
  l = log --date=format:'%Y-%m-%d %H:%M' --pretty=format:'%C(yellow)%h %Cgreen%cd %Cblue%cn %Creset%s'
	fp = !git fetch && git pull --rebase
	# git force push with lease
	pushff = push --force-with-lease --force-if-includes
	# リモートリポジトリ上で削除されたブランチをローカルの追跡ブランチからも削除
	ftp = fetch --prune
	swc = switch -c
	# branch local
	bl = !git for-each-ref --sort=-authordate --format='%(authordate:short) %(refname)' refs/heads | sed 's/refs\\/heads\\///'
	# branch remote
	br = !git for-each-ref --sort=-authordate --format='%(authordate:short) %(refname)' refs/remotes | sed 's/refs\\/remotes\\///' | grep -v 'origin/HEAD'
	# switch local branch
	swl = !git bl | fzf --no-sort --preview 'git l -n 10' | awk '{ print $NF }' | xargs git switch
	# switch remote branch
	swr = !git fetch --prune && git br | fzf --no-sort | awk '{ print $NF }' | xargs -I{} sh -c 'git checkout -t {} || echo {} | sed -e "s%[^/]*/%%" | xargs git switch'
	# delete local branch
	dlb = !git bl | fzf --header '[delete local branch]' | awk '{ print $NF }' | xargs git branch -D
	# delete remote branch
	drb = !git br | fzf --header '[delete reteme branch]' | awk '{ print $NF }' | sed -r 's/([^\\/]+)\\/(.+)/\\1 \\2/g' | xargs git push -d
	# switch forward
	swf = !git stash save && git switch
	# switch back
	swb = !git switch - && git stash pop
	# リモートブランチの最新の状態にローカルブランチを強制的にリセット
  rho = !git cbn | sed 's/\\.*/origin\\/&/' | xargs git rh
	cbn = branch --show-current # rev-parse --abbrev-ref HEAD
	rh = reset --hard
  # delete merged branch: リモート追跡が消えた（gone）ブランチのみが削除対象
  dmb = !git fetch --prune && \
        git branch -vv | grep ': gone]' | awk '{print $1}' | \
        grep -v -E '^(master|main|dev)$' | xargs -r git branch -D
	# remote dev を最新にしてマージ済みブランチ削除（安全版：未コミット変更をチェック）
	up = !git status --porcelain | grep -q . && echo \"Warning: You have uncommitted changes. Stash or commit them first.\" && exit 1 || (git ftp && git rho && git dmb)
	# dev branch と特定のファイルの差分を比較
	dd = !git diff origin/dev --
	# dev ブランチの内容を現在のブランチに反映
	cd = !git checkout origin/dev --

# =============================================================================
# ワークツリー管理 / worktree
# =============================================================================
  wl = worktree list
	# worktree作成 or worktreeを開く
  wo = !repo=$(basename $(pwd)) && branch=$(git bl | fzf --header '[create worktree and open in Cursor]' | awk '{print $2}') && [ -n \"$branch\" ] && worktree_dir=\"../$repo.w/$branch\" && (git worktree add \"$worktree_dir\" \"$branch\" 2>/dev/null || true) && [ -d \"$worktree_dir\" ] && open -a Cursor \"$worktree_dir\" || echo \"Failed to create or find worktree directory\"
	# worktree削除
  wr = !git worktree list | grep -v '(bare)' | sed '1d' | fzf -m --header '[remove worktree (multi-select with Tab)]' | awk '{print $1}' | xargs -r -I {} git worktree remove {}
